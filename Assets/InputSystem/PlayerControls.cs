//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""2afd6b33-4294-4b77-b1f0-0f26f9e4c743"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b27b1184-e14d-4f23-a5c2-75cd48375f93"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""1f02c357-d072-4699-a87a-5112b30e340f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""97f73e6e-77ad-4de3-82c8-6f513a21b546"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationRight"",
                    ""type"": ""Button"",
                    ""id"": ""688ca639-b21d-4261-8995-3ea95dcf5460"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationLeft"",
                    ""type"": ""Button"",
                    ""id"": ""44041d32-8722-4503-8f20-62493f557c61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sit"",
                    ""type"": ""Button"",
                    ""id"": ""0d5ff9cc-7b5b-4aa2-9540-e30f29618e56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ce29b427-216c-440c-bf6b-ff621f3f719e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b778719-ac14-4343-abdc-c4409afbfc23"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""02dd3862-5cf7-43c3-86bb-597b6c3e4073"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e1391264-6fbe-4845-aa2c-38a0e247653a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""000a3e4e-f3ab-421f-8b92-108aaeb8b041"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d05cc09-4891-4845-8b87-1819ce30ee82"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""RotationRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44366f01-772b-45e7-adde-f4930c708283"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""RotationLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c34efe18-0d0c-4cca-9f88-8951a775f4b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Sit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InteractionObject"",
            ""id"": ""fd2c3b84-95a9-4e7a-a51b-acae92caceda"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a55d6229-c806-4b28-96f8-f7670f5f5dfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeaveInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""e5a7b7c6-4fe5-4d3b-a5c9-4fcdcaf99b40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""55fe039e-8ec2-43ab-8308-ff53eb5d2705"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5e8c981-773e-4f8c-94ee-4a8d09d9e2a5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""LeaveInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and mouse"",
            ""bindingGroup"": ""Keyboard and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_Sprint = m_Gameplay.FindAction("Sprint", throwIfNotFound: true);
        m_Gameplay_Interact = m_Gameplay.FindAction("Interact", throwIfNotFound: true);
        m_Gameplay_RotationRight = m_Gameplay.FindAction("RotationRight", throwIfNotFound: true);
        m_Gameplay_RotationLeft = m_Gameplay.FindAction("RotationLeft", throwIfNotFound: true);
        m_Gameplay_Sit = m_Gameplay.FindAction("Sit", throwIfNotFound: true);
        // InteractionObject
        m_InteractionObject = asset.FindActionMap("InteractionObject", throwIfNotFound: true);
        m_InteractionObject_Interact = m_InteractionObject.FindAction("Interact", throwIfNotFound: true);
        m_InteractionObject_LeaveInteraction = m_InteractionObject.FindAction("LeaveInteraction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_Sprint;
    private readonly InputAction m_Gameplay_Interact;
    private readonly InputAction m_Gameplay_RotationRight;
    private readonly InputAction m_Gameplay_RotationLeft;
    private readonly InputAction m_Gameplay_Sit;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @Sprint => m_Wrapper.m_Gameplay_Sprint;
        public InputAction @Interact => m_Wrapper.m_Gameplay_Interact;
        public InputAction @RotationRight => m_Wrapper.m_Gameplay_RotationRight;
        public InputAction @RotationLeft => m_Wrapper.m_Gameplay_RotationLeft;
        public InputAction @Sit => m_Wrapper.m_Gameplay_Sit;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @RotationRight.started += instance.OnRotationRight;
            @RotationRight.performed += instance.OnRotationRight;
            @RotationRight.canceled += instance.OnRotationRight;
            @RotationLeft.started += instance.OnRotationLeft;
            @RotationLeft.performed += instance.OnRotationLeft;
            @RotationLeft.canceled += instance.OnRotationLeft;
            @Sit.started += instance.OnSit;
            @Sit.performed += instance.OnSit;
            @Sit.canceled += instance.OnSit;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @RotationRight.started -= instance.OnRotationRight;
            @RotationRight.performed -= instance.OnRotationRight;
            @RotationRight.canceled -= instance.OnRotationRight;
            @RotationLeft.started -= instance.OnRotationLeft;
            @RotationLeft.performed -= instance.OnRotationLeft;
            @RotationLeft.canceled -= instance.OnRotationLeft;
            @Sit.started -= instance.OnSit;
            @Sit.performed -= instance.OnSit;
            @Sit.canceled -= instance.OnSit;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // InteractionObject
    private readonly InputActionMap m_InteractionObject;
    private List<IInteractionObjectActions> m_InteractionObjectActionsCallbackInterfaces = new List<IInteractionObjectActions>();
    private readonly InputAction m_InteractionObject_Interact;
    private readonly InputAction m_InteractionObject_LeaveInteraction;
    public struct InteractionObjectActions
    {
        private @PlayerControls m_Wrapper;
        public InteractionObjectActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_InteractionObject_Interact;
        public InputAction @LeaveInteraction => m_Wrapper.m_InteractionObject_LeaveInteraction;
        public InputActionMap Get() { return m_Wrapper.m_InteractionObject; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionObjectActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionObjectActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionObjectActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionObjectActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @LeaveInteraction.started += instance.OnLeaveInteraction;
            @LeaveInteraction.performed += instance.OnLeaveInteraction;
            @LeaveInteraction.canceled += instance.OnLeaveInteraction;
        }

        private void UnregisterCallbacks(IInteractionObjectActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @LeaveInteraction.started -= instance.OnLeaveInteraction;
            @LeaveInteraction.performed -= instance.OnLeaveInteraction;
            @LeaveInteraction.canceled -= instance.OnLeaveInteraction;
        }

        public void RemoveCallbacks(IInteractionObjectActions instance)
        {
            if (m_Wrapper.m_InteractionObjectActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionObjectActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionObjectActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionObjectActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionObjectActions @InteractionObject => new InteractionObjectActions(this);
    private int m_KeyboardandmouseSchemeIndex = -1;
    public InputControlScheme KeyboardandmouseScheme
    {
        get
        {
            if (m_KeyboardandmouseSchemeIndex == -1) m_KeyboardandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and mouse");
            return asset.controlSchemes[m_KeyboardandmouseSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnRotationRight(InputAction.CallbackContext context);
        void OnRotationLeft(InputAction.CallbackContext context);
        void OnSit(InputAction.CallbackContext context);
    }
    public interface IInteractionObjectActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnLeaveInteraction(InputAction.CallbackContext context);
    }
}
